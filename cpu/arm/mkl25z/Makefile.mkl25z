# Adapted from Makefile.msp430

### Code common for all ARM CPUs

CONTIKI_CPU_ARM=$(CONTIKI)/cpu/arm
CONTIKI_CPU_ARM_COMMON=$(CONTIKI_CPU_ARM)/common

### Define the CPU directory
CONTIKI_CPU=$(CONTIKI_CPU_ARM)/mkl25z

EWL_PATH = $(CONTIKI_CPU_ARM)/mkl25z/ARM_GCC_Support/ewl/EWL_C/include
EWL_RUNTIME_PATH = $(CONTIKI_CPU_ARM)/mkl25z/ARM_GCC_Support/ewl/EWL_Runtime/include
EWL_LIB_PATH = $(CONTIKI_CPU_ARM)/mkl25z/ARM_GCC_Support/ewl/lib/armv6-m

MCU = cortex-m0

# List all user C define here, like -D_DEBUG=1
UDEFS =

# Define ASM defines here
UADEFS =

# List all default C defines here, like -D_DEBUG=1
DDEFS =

# List all default ASM defines here, like -D_DEBUG=1
DADEFS =

# List all default directories to look for include files here
DINCDIR =

# List the default directory to look for the libraries here
DLIBDIR =

# List all default libraries here
DLIBS =


### Define the source files we have in the mkl25z port

CONTIKI_CPU_DIRS = . ../common/dbg-io loader



MKL25Z     = clock.c debug-uart.c rtimer-arch.c serial.c nvic.c cpu.c clock.c __arm_start.c __arm_end.c kinetis_sysinit.c

# SYSAPPS = codeprop-otf.c
# APPDIRS += $(CONTIKI)/cpu/at91sam7s/loader

# ELFLOADER = elfloader-otf.c elfloader-arm.c symtab.c cfs-ram.c

# include $(CONTIKI_CPU_ARM_COMMON)/usb/Makefile.usb

# include $(CONTIKI_CPU_ARM_COMMON)/SD-card/Makefile.sdcard

TARGETLIBS = random.c dbg-printf.c dbg-puts.c dbg-putchar.c dbg-sprintf.c dbg-snprintf.c strformat.c

CONTIKI_TARGET_SOURCEFILES += $(MKL25Z) $(SYSAPPS) $(ELFLOADER) \
			$(TARGETLIBS) $(UIPDRIVERS) $(USB)

CONTIKI_SOURCEFILES        += $(CONTIKI_TARGET_SOURCEFILES)


THREADS =

### Compiler definitions
CC       = arm-none-eabi-gcc
CP       = arm-none-eabi-objcopy
LD       = arm-none-eabi-ld
AS       = arm-none-eabi-as
AR       = arm-none-eabi-ar
NM       = arm-none-eabi-nm
OBJCOPY  = arm-none-eabi-objcopy
STRIP    = arm-none-eabi-strip
HEX      = $(CP) -O ihex
BIN      = $(CP) -O binary -S
S19      = $(CP) -O srec


XSLTPROC=xsltproc

PROJECT_OBJECTFILES += ${addprefix $(OBJECTDIR)/,$(CONTIKI_TARGET_MAIN:.c=.o)}
PROJECT_OBJECTFILES2 = ${addprefix -I, $(PROJECT_OBJECTFILES)}
#${addprefix -I ,$(PROJECT_OBJECTFILES)}

LINKERSCRIPT = $(CONTIKI_CPU)/MKL25Z128_flash.ld

STARTUP=${addprefix $(OBJECTDIR)/,__arm_start.o}

# JTAG program upload
OPENOCD	 = openocd
OPENOCD_DIR = $(CONTIKI_CPU_ARM)/openocd/ 
OPENOCD_CFG = kl25z.cfg
OPENOCD_FLAGS = -c "interface cmsis-dap" 
OPENOCD_FLAGS += -c init 
OPENOCD_FLAGS += -c "reset halt;sleep 250;flash probe 0; sleep 500;flash write_bank 0 $< 0;reset halt;resume;sleep 500;exit"


# Use OpenOCD by default
PROG=openocd

ARCH_FLAGS= -mthumb
MCFLAGS = -mcpu=$(MCU)
CPFLAGS = -gdwarf-2 -fomit-frame-pointer -Wall -Wstrict-prototypes -fverbose-asm 

DEFS = $(DDEFS) $(UDEFS)
ADEFS = $(DADEFS) $(UADEFS)
OBJS = $(ASRC:.S=.o) $(SRC:.c=.o)
LIBS = $(DLIBS) $(ULIBS)


CFLAGSNO = -I. -I$(CONTIKI)/core -I$(CONTIKI_CPU) -I$(CONTIKI_CPU)/loader \
	   -I$(CONTIKI_CPU)/dbg-io \
           -I$(CONTIKI)/platform/$(TARGET) -I$(EWL_PATH) -I$(EWL_RUNTIME_PATH)\
           ${addprefix -I,$(APPDIRS)} \
           -DWITH_UIP -DWITH_ASCII -DMCK=$(MCK) \
           -g
		   
 
ASFLAGS = $(MCFLAGS) $(ARCH_FLAGS) -g -gdwarf-2 -Wa,-amhls=$(<:.S=.lst) $(ADEFS)		   
CFLAGS  += $(MCFLAGS) $(OPT) $(CPFLAGS) $(ARCH_FLAGS) $(CFLAGSNO) -O -DRUN_AS_SYSTEM -DROM_RUN -Wa,-ahlms=$(<:.c=.lst) $(DEFS)
LDFLAGS += $(MCFLAGS) $(ARCH_FLAGS) -L $(CONTIKI_CPU) -L $(EWL_LIB_PATH) -nostartfiles -T $(LINKERSCRIPT) -Xlinker --gc-sections -Wl,-Map=$(FULL_PRJ).map,-cref,-no-warn-mismatch -n -specs=ewl_c.specs -Xlinker --undefined=__pformatter_ -Xlinker --defsym=__pformatter=__pformatter_ -Xlinker --undefined=__sformatter -Xlinker --defsym=__sformatter=__sformatter -mcpu=cortex-m0 -mthumb -mfloat-abi=soft -g3 -gdwarf-2 -gstrict-dwarf

CDEPFLAGS = $(CFLAGS) -D __MAKING_DEPS__

# Generate dependency information
#CPFLAGS += -MD -MP -MF #.dep/$(@F).d


### Setup directory search path for source files

CUSTOM_RULE_C_TO_OBJECTDIR_O=yes
CUSTOM_RULE_C_TO_O=yes

%.o: %.c
	$(CC) $(CFLAGS) $< -c 

$(OBJECTDIR)/%.o: %.c | $(OBJECTDIR)
	$(CC) $(CFLAGS) -c $< -o $@


CUSTOM_RULE_S_TO_OBJECTDIR_O = yes
%.o: %.S
	$(CC) $(CFLAGS) $< -c

$(OBJECTDIR)/%.o: %.S | $(OBJECTDIR)
	$(CC) $(CFLAGS) $< -c  -o $@


CUSTOM_RULE_C_TO_CO=yes

%.co: %.c
	$(CC) $(CFLAGS) $< -c -o $@

CUSTOM_RULE_C_TO_CE=yes

%.ce: %.o
	$(LD) $(LDFLAGS) --relocatable $< -o $@
	$(STRIP) -K _init -K _fini --strip-unneeded -g -x $@

CUSTOM_RULE_LINK=yes

%.ce2: %.o
	$(CC) -I $(PROJECT_OBJECTFILES2) -I $(STARTUP) $(LDFLAGS) $< -o $@
	$(STRIP) -K _init -K _fini --strip-unneeded -g -x $@

CUSTOM_RULE_LINK=yes

%s19: %elf
	$(S19) $< $@

%-stripped.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@
	$(STRIP) --strip-unneeded -g -x $@

%-stripped.o: %.o
	$(STRIP) --strip-unneeded -g -x -o $@ $<

%.o: ${CONTIKI_TARGET}/loader/%.S
	$(AS) -o $(notdir $(<:.S=.o)) $<

%-nosyms.$(TARGET): %.co $(PROJECT_OBJECTFILES) contiki-$(TARGET).a $(STARTUP) # $(OBJECTDIR)/empty-symbols.o
	$(CC) $(LDFLAGS) $(CFLAGS) -nostartfiles -o $@ $(filter-out %.a,$^) $(filter %.a,$^) -lc $(filter %.a,$^)


%.ihex: %.$(TARGET)
	$(OBJCOPY) $^ -O ihex $@

%.bin: %.$(TARGET)
	$(OBJCOPY) -O binary -S $< $@
 
.PHONY: symbols.c
ifdef CORE
%.$(TARGET): %.co $(PROJECT_OBJECTFILES) contiki-$(TARGET).a $(STARTUP) $(OBJECTDIR)/symbols.o
	$(CC) $(LDFLAGS) $(CFLAGS) -nostartfiles -o $@ $(filter-out %.a,$^) $(filter %.a,$^) -lc $(filter %.a,$^)

symbols.c: $(CORE)
	$(NM) $< | awk -f $(CONTIKI_CPU)/builtins.awk -f ../../tools/mknmlist > symbols.c

else
%.$(TARGET): %-nosyms.$(TARGET)
	ln -sf $< $@
endif

empty-symbols.c:
	cp ${CONTIKI}/tools/empty-symbols.c symbols.c
	cp ${CONTIKI}/tools/empty-symbols.h symbols.h



%.u: %.bin
	# Clear lock bits
	$(OPENOCD) -s $(OPENOCD_DIR) -f $(OPENOCD_CFG) $(OPENOCD_FLAGS)
	$(S19) $< $@

ocd_reset:
	$(OPENOCD) -s $(OPENOCD_DIR) -f $(OPENOCD_CFG) -c init -c "reset halt;resume" -c exit

# Don't use core/loader/elfloader.c, use elfloader-otf.c instead
$(OBJECTDIR)/elfloader.o: | $(OBJECTDIR)
	echo -n >$@

clean: clean_cpu

.PHONY: mkl25z_clean

clean_cpu:
	-rm -rf $(BUILTSRCDIR)

.PRECIOUS: %-nosyms.$(TARGET)
