/* EWL
 * Copyright © 1995-2009 Freescale Corporation.  All rights reserved.
 *
 * $Date: 2010/09/16 11:28:05 $
 * $Revision: 1.7 $
 */

#ifndef _EWL_CCTYPE
#define _EWL_CCTYPE

#include <ansi_parms.h>

/* The header <ctype.h> declares several functions useful for classifying and mapping
   characters.166) In all cases the argument is an int, the value of which shall be
   representable as an unsigned char or shall equal the value of the macro EOF. If the
   argument has any other value, the behavior is undefined. */

#if !_EWL_USING_MW_C_HEADERS
	#include <ctype.h>

	#if _EWL_PUT_THIRD_PARTY_C_IN_STD
		#include <ewl_cpp_std_ctype.h>
	#endif
#elif _AEABI_PORTABILITY_LEVEL
	#include <arm/cctype_aeabi>
#elif _GCCPORT_
	#include <cctype_gcc>
#else

#include <ctype_api.h>
#include <eof.h>

_EWL_BEGIN_NAMESPACE_STD
_EWL_BEGIN_EXTERN_C

	_EWL_IMP_EXP_C int _EWL_CDECL isalnum(int) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C int _EWL_CDECL isalpha(int) _EWL_CANT_THROW;
#if _EWL_C99
	_EWL_IMP_EXP_C int _EWL_CDECL isblank(int) _EWL_CANT_THROW;
#endif /* _EWL_C99 */
	_EWL_IMP_EXP_C int _EWL_CDECL iscntrl(int) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C int _EWL_CDECL isdigit(int) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C int _EWL_CDECL isgraph(int) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C int _EWL_CDECL islower(int) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C int _EWL_CDECL isprint(int) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C int _EWL_CDECL ispunct(int) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C int _EWL_CDECL isspace(int) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C int _EWL_CDECL isupper(int) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C int _EWL_CDECL isxdigit(int) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C int _EWL_CDECL tolower(int) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C int _EWL_CDECL toupper(int) _EWL_CANT_THROW;

_EWL_END_EXTERN_C

#if _EWL_USE_INLINE
#if _EMBEDDED_WARRIOR_CTYPE

	_EWL_INLINE int _EWL_CDECL isalnum(int c) _EWL_CANT_THROW	{ return  (int)_ctypes_[((unsigned)c > _MXC_ ? -1 : c )+1] & (_UC_ | _LC_ | _NM_); }
	_EWL_INLINE int _EWL_CDECL isalpha(int c) _EWL_CANT_THROW	{ return  (int)_ctypes_[((unsigned)c > _MXC_ ? -1 : c )+1] & (_UC_ | _LC_); }
#if _EWL_C99
	_EWL_INLINE int _EWL_CDECL isblank(int c) _EWL_CANT_THROW	{ return  c == ' ' || c == '\t'; }
#endif /* _EWL_C99 */
	_EWL_INLINE int _EWL_CDECL iscntrl(int c) _EWL_CANT_THROW	{ return  (int)_ctypes_[((unsigned)c > _MXC_ ? -1 : c )+1] & _CL_; }
	_EWL_INLINE int _EWL_CDECL isdigit(int c) _EWL_CANT_THROW	{ return  (int)_ctypes_[((unsigned)c > _MXC_ ? -1 : c )+1] & _NM_; }
	_EWL_INLINE int _EWL_CDECL isgraph(int c) _EWL_CANT_THROW	{ return  (int)_ctypes_[((unsigned)c > _MXC_ ? -1 : c )+1] & (_UC_ | _LC_ | _NM_ | _PU_);}
	_EWL_INLINE int _EWL_CDECL islower(int c) _EWL_CANT_THROW	{ return  (int)_ctypes_[((unsigned)c > _MXC_ ? -1 : c )+1] & _LC_; }
	_EWL_INLINE int _EWL_CDECL isprint(int c) _EWL_CANT_THROW	{ return  (int)_ctypes_[((unsigned)c > _MXC_ ? -1 : c )+1] & (_BL_ | _UC_ | _LC_ | _NM_ | _PU_);}
	_EWL_INLINE int _EWL_CDECL ispunct(int c) _EWL_CANT_THROW	{ return  (int)_ctypes_[((unsigned)c > _MXC_ ? -1 : c )+1] & _PU_; }
	_EWL_INLINE int _EWL_CDECL isspace(int c) _EWL_CANT_THROW	{ return  (int)_ctypes_[((unsigned)c > _MXC_ ? -1 : c )+1] & _SP_; }
	_EWL_INLINE int _EWL_CDECL isupper(int c) _EWL_CANT_THROW	{ return  (int)_ctypes_[((unsigned)c > _MXC_ ? -1 : c )+1] & _UC_; }
	_EWL_INLINE int _EWL_CDECL isxdigit(int c) _EWL_CANT_THROW	{ return  (int)_ctypes_[((unsigned)c > _MXC_ ? -1 : c )+1] & _HX_; }
	_EWL_INLINE int _EWL_CDECL tolower(int c) _EWL_CANT_THROW	{ return isupper(c) ? c + ('a' - 'A') : c; }
	_EWL_INLINE int _EWL_CDECL toupper(int c) _EWL_CANT_THROW	{ return islower(c) ? c - ('a' - 'A') : c; }

#else

	_EWL_INLINE int _EWL_CDECL isalnum(int c) _EWL_CANT_THROW	{ return ((c < 0) || (c >= __ewl_cmap_size)) ? 0 : (int) (_EWL_CMAP_ACCESS[c] & __ewl_alnum); }
	_EWL_INLINE int _EWL_CDECL isalpha(int c) _EWL_CANT_THROW	{ return ((c < 0) || (c >= __ewl_cmap_size)) ? 0 : (int) (_EWL_CMAP_ACCESS[c] & __ewl_alpha); }
#if _EWL_C99
	_EWL_INLINE int _EWL_CDECL isblank(int c) _EWL_CANT_THROW	{ return ((c < 0) || (c >= __ewl_cmap_size)) ? 0 : (int) (_EWL_CMAP_ACCESS[c] & __ewl_blank); }
#endif /* _EWL_C99 */
	_EWL_INLINE int _EWL_CDECL iscntrl(int c) _EWL_CANT_THROW	{ return ((c < 0) || (c >= __ewl_cmap_size)) ? 0 : (int) (_EWL_CMAP_ACCESS[c] & __ewl_cntrl); }
	_EWL_INLINE int _EWL_CDECL isdigit(int c) _EWL_CANT_THROW	{ return ((c < 0) || (c >= __ewl_cmap_size)) ? 0 : (int) (_EWL_CMAP_ACCESS[c] & __ewl_digit); }
	_EWL_INLINE int _EWL_CDECL isgraph(int c) _EWL_CANT_THROW	{ return ((c < 0) || (c >= __ewl_cmap_size)) ? 0 : (int) (_EWL_CMAP_ACCESS[c] & __ewl_graph); }
	_EWL_INLINE int _EWL_CDECL islower(int c) _EWL_CANT_THROW	{ return ((c < 0) || (c >= __ewl_cmap_size)) ? 0 : (int) (_EWL_CMAP_ACCESS[c] & __ewl_lower); }
	_EWL_INLINE int _EWL_CDECL isprint(int c) _EWL_CANT_THROW	{ return ((c < 0) || (c >= __ewl_cmap_size)) ? 0 : (int) (_EWL_CMAP_ACCESS[c] & __ewl_print); }
	_EWL_INLINE int _EWL_CDECL ispunct(int c) _EWL_CANT_THROW	{ return ((c < 0) || (c >= __ewl_cmap_size)) ? 0 : (int) (_EWL_CMAP_ACCESS[c] & __ewl_punct); }
	_EWL_INLINE int _EWL_CDECL isspace(int c) _EWL_CANT_THROW	{ return ((c < 0) || (c >= __ewl_cmap_size)) ? 0 : (int) (_EWL_CMAP_ACCESS[c] & __ewl_space); }
	_EWL_INLINE int _EWL_CDECL isupper(int c) _EWL_CANT_THROW	{ return ((c < 0) || (c >= __ewl_cmap_size)) ? 0 : (int) (_EWL_CMAP_ACCESS[c] & __ewl_upper); }
	_EWL_INLINE int _EWL_CDECL isxdigit(int c) _EWL_CANT_THROW	{ return ((c < 0) || (c >= __ewl_cmap_size)) ? 0 : (int) (_EWL_CMAP_ACCESS[c] & __ewl_xdigit); }
	_EWL_INLINE int _EWL_CDECL tolower(int c) _EWL_CANT_THROW	{ return ((c < 0) || (c >= __ewl_cmap_size)) ? c : (int) (_EWL_CLOWER_ACCESS[c]); }
	_EWL_INLINE int _EWL_CDECL toupper(int c) _EWL_CANT_THROW	{ return ((c < 0) || (c >= __ewl_cmap_size)) ? c : (int) (_EWL_CUPPER_ACCESS[c]); }

#endif /* _EMBEDDED_WARRIOR_CTYPE */
#endif /* _EWL_USE_INLINE */

_EWL_END_NAMESPACE_STD

#if defined(_EWL_EXPORT_CNAMES) && defined(__cplusplus) && defined(_EWL_USING_NAMESPACE)
#include <ctype.h>
#endif /*  defined(_EWL_EXPORT_CNAMES) && defined(__cplusplus) && defined(_EWL_USING_NAMESPACE) */

#endif /* _EWL_USING_MW_C_HEADERS */

#endif /* _EWL_CCTYPE */
