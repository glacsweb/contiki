/* EWL
 * Copyright © 1995-2009 Freescale Corporation.  All rights reserved.
 *
 * $Date: 2009/11/05 19:15:37 $
 * $Revision: 1.2 $
 */

#ifndef _EWL_CSTRING
#define _EWL_CSTRING

#include <ansi_parms.h>

#if !_EWL_USING_MW_C_HEADERS
	#include <string.h>

	#if _EWL_PUT_THIRD_PARTY_C_IN_STD
		#include <ewl_cpp_std_string.h>
	#endif
#else

#include <null.h>
#include <size_t.h>
#include <ewl_lib_ext1.h>
#include <ewl_rsize_t.h>

#if _EWL_NEEDS_EXTRAS
	#include <extras_string.h>
#endif

#include <string_api.h>

_EWL_BEGIN_NAMESPACE_STD
_EWL_BEGIN_EXTERN_C

_EWL_IMP_EXP_C void * _EWL_CDECL memset(void *, int, size_t) _EWL_CANT_THROW;
_EWL_IMP_EXP_C int	  _EWL_CDECL memcmp(const void *, const void *, size_t) _EWL_CANT_THROW;
_EWL_IMP_EXP_C void * _EWL_CDECL memcpy(void * _EWL_RESTRICT, const void * _EWL_RESTRICT, size_t) _EWL_CANT_THROW;
_EWL_IMP_EXP_C void * _EWL_CDECL memmove(void *, const void *, size_t) _EWL_CANT_THROW;
_EWL_IMP_EXP_C size_t _EWL_CDECL strlen(const char *) _EWL_CANT_THROW;
_EWL_IMP_EXP_C char * _EWL_CDECL strcpy(char * _EWL_RESTRICT, const char * _EWL_RESTRICT) _EWL_CANT_THROW;
_EWL_IMP_EXP_C char * _EWL_CDECL strncpy(char * _EWL_RESTRICT, const char * _EWL_RESTRICT, size_t) _EWL_CANT_THROW;
_EWL_IMP_EXP_C char * _EWL_CDECL strcat(char * _EWL_RESTRICT, const char * _EWL_RESTRICT) _EWL_CANT_THROW;
_EWL_IMP_EXP_C char * _EWL_CDECL strncat(char * _EWL_RESTRICT, const char * _EWL_RESTRICT, size_t) _EWL_CANT_THROW;
_EWL_IMP_EXP_C int    _EWL_CDECL strcmp(const char *, const char *) _EWL_CANT_THROW;
_EWL_IMP_EXP_C int    _EWL_CDECL strncmp(const char *, const char *, size_t) _EWL_CANT_THROW;
_EWL_IMP_EXP_C int    _EWL_CDECL strcoll(const char *, const char *) _EWL_CANT_THROW;
_EWL_IMP_EXP_C size_t _EWL_CDECL strxfrm(char * _EWL_RESTRICT, const char * _EWL_RESTRICT, size_t) _EWL_CANT_THROW;
#if !defined(__cplusplus)
_EWL_IMP_EXP_C void * _EWL_CDECL memchr(const void *, int, size_t) _EWL_CANT_THROW;
_EWL_IMP_EXP_C char * _EWL_CDECL strchr(const char *, int) _EWL_CANT_THROW;
_EWL_IMP_EXP_C char * _EWL_CDECL strpbrk(const char *, const char *) _EWL_CANT_THROW;
_EWL_IMP_EXP_C char * _EWL_CDECL strrchr(const char *, int) _EWL_CANT_THROW;
_EWL_IMP_EXP_C char * _EWL_CDECL strstr(const char * , const char *) _EWL_CANT_THROW;
#else
_EWL_IMP_EXP_C const void * _EWL_CDECL memchr(const void *, int, size_t) _EWL_CANT_THROW;
_EWL_IMP_EXP_C const char * _EWL_CDECL strchr(const char *, int) _EWL_CANT_THROW;
_EWL_IMP_EXP_C const char * _EWL_CDECL strpbrk(const char *, const char *) _EWL_CANT_THROW;
_EWL_IMP_EXP_C const char * _EWL_CDECL strrchr(const char *, int) _EWL_CANT_THROW;
_EWL_IMP_EXP_C const char * _EWL_CDECL strstr(const char * , const char *) _EWL_CANT_THROW;
#endif /* __cplusplus */
_EWL_IMP_EXP_C size_t _EWL_CDECL strspn(const char *, const char *) _EWL_CANT_THROW;
_EWL_IMP_EXP_C size_t _EWL_CDECL strcspn(const char *, const char *) _EWL_CANT_THROW;
_EWL_IMP_EXP_C char * _EWL_CDECL strtok(char * _EWL_RESTRICT, const char * _EWL_RESTRICT) _EWL_CANT_THROW;
_EWL_IMP_EXP_C char * _EWL_CDECL strerror(int) _EWL_CANT_THROW;

#if defined(__STDC_WANT_LIB_EXT1__) && __STDC_WANT_LIB_EXT1__
	_EWL_IMP_EXP_C errno_t _EWL_CDECL memcpy_s(void * _EWL_RESTRICT, rsize_t, const void * _EWL_RESTRICT, rsize_t) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C errno_t _EWL_CDECL memmove_s(void *, rsize_t, const void *, rsize_t) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C size_t _EWL_CDECL strnlen_s(const char *, size_t) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C errno_t _EWL_CDECL strcpy_s(char * _EWL_RESTRICT, rsize_t, const char * _EWL_RESTRICT) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C errno_t _EWL_CDECL strncpy_s(char * _EWL_RESTRICT, rsize_t, const char * _EWL_RESTRICT, rsize_t) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C errno_t _EWL_CDECL strcat_s(char * _EWL_RESTRICT, rsize_t, const char * _EWL_RESTRICT) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C errno_t _EWL_CDECL strncat_s(char * _EWL_RESTRICT, rsize_t, const char * _EWL_RESTRICT, rsize_t) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C errno_t _EWL_CDECL strerror_s(char *, rsize_t, errno_t) _EWL_CANT_THROW;

	_EWL_IMP_EXP_C char * _EWL_CDECL strtok_s(char * _EWL_RESTRICT, const char * _EWL_RESTRICT, char ** _EWL_RESTRICT) _EWL_CANT_THROW;
#endif /* __STDC_WANT_LIB_EXT1__ */

_EWL_END_EXTERN_C

#if defined(__cplusplus)

	extern "C++" {

	inline
	char* _EWL_CDECL
	strchr(char* s, int c) _EWL_CANT_THROW
	{
		return const_cast<char*>(strchr(static_cast<const char*>(s), c));
	}

	inline
	char* _EWL_CDECL
	strpbrk(char* s1, const char* s2) _EWL_CANT_THROW
	{
		return const_cast<char*>(strpbrk(static_cast<const char*>(s1), s2));
	}

	inline
	char* _EWL_CDECL
	strrchr(char* s, int c) _EWL_CANT_THROW
	{
		return const_cast<char*>(strrchr(static_cast<const char*>(s), c));
	}

	inline
	char* _EWL_CDECL
	strstr(char* s1, const char* s2) _EWL_CANT_THROW
	{
		return const_cast<char*>(strstr(static_cast<const char*>(s1), s2));
	}

	inline
	void* _EWL_CDECL
	memchr(void* s, int c, size_t n) _EWL_CANT_THROW
	{
		return const_cast<void*>(memchr(static_cast<const void*>(s), c, n));
	}

	} /* extern "C" */

#endif /* __cplusplus */

_EWL_END_NAMESPACE_STD

#if defined(_EWL_EXPORT_CNAMES) && defined(__cplusplus) && defined(_EWL_USING_NAMESPACE)
#include <string.h>
#endif /*  defined(_EWL_EXPORT_CNAMES) && defined(__cplusplus) && defined(_EWL_USING_NAMESPACE) */

#endif /* _EWL_USING_MW_C_HEADERS || __PALMOS_TRAPS__ */

#endif /* _EWL_CSTRING */
