/* EWL
 * Copyright © 1995-2009 Freescale Corporation.  All rights reserved.
 *
 * $Date: 2012/10/09 08:15:25 $
 * $Revision: 1.15 $
 */

 /*
  * This header file is a portable cmath header for all CodeWarrior compilers/targets - except
  * for the traditional Mac OS.  The Mac OS is unique in that it is currently the only
  * platform where CodeWarrior does not provide the math portion of the C standard library.
  * We simply hook into the library provided by Apple as part of the Mac OS.
  */

#ifndef _EWL_CMATH
#define _EWL_CMATH

#ifdef __STARCORE__
#pragma reject_floats off 
#endif 

#ifndef __cmath__
   #define __cmath__    /* JWW - Keep the Apple Universal Interfaces happy */
#endif  /* __cmath__ */

#include <ansi_parms.h>

_MISRA_EXCEPTION_CMATH_MACROS()

#if _AEABI_PORTABILITY_LEVEL
	#include <arm/cmath_aeabi>
#endif

#if _EWL_C99 || _EWL_C99_MATH_LEAK
	#ifndef MATH_ERRNO
	#define MATH_ERRNO 		1
	#endif /* MATH_ERRNO */

	#ifndef MATH_ERREXCEPT
	#define MATH_ERREXCEPT	2
	#endif /* MATH_ERREXCEPT */

	#ifndef math_errhandling
	#define math_errhandling _EWL_MATH_ERRHANDLING
	#endif /* math_errhandling */
#endif /* _EWL_C99 || _EWL_C99_MATH_LEAK*/

#if _EWL_FLOATING_POINT || _EWL_FLOATING_POINT_IO

/* mostly complete overrides of the math library */
#if __dest_os == __m56800_os || __dest_os == __m56800E_os
	#include <dsp/cmath_dsp56800x.h>
#else	/* this goes to the end of the file */

#define _EWL_CMATH_DEFINED_MATH_ITEMS

#include <math_api.h>
#include <limits_api.h>

/************************/
/*						*/
/* 	 Standard Macros	*/
/*						*/
/************************/

#if _EWL_C99 || _EWL_USES_SUN_MATH_LIB
	#define FP_NAN       1  /*   quiet NaN */
	#define FP_INFINITE  2  /*   + or - infinity */
#endif /* _EWL_USES_SUN_MATH_LIB */

#if _EWL_C99 || _EWL_C_HAS_CPP_EXTENSIONS  || _EWL_USES_SUN_MATH_LIB
	#define FP_ZERO      3  /*   + or - zero          */
	#define FP_NORMAL    4  /*   all normal numbers   */
	#define FP_SUBNORMAL 5  /*   denormal numbers     */
#endif /* _EWL_C99 || _EWL_C_HAS_CPP_EXTENSIONS */

#if _EWL_C99 || _EWL_C99_MATH_LEAK
	#ifndef FP_ILOGB0
	#define FP_ILOGB0   _EWL_INT_MIN
	#endif
	#ifndef FP_ILOGBNAN
	#define FP_ILOGBNAN _EWL_INT_MAX
	#endif

	#ifndef MATH_ERRNO
	#define MATH_ERRNO 		1
	#endif /* MATH_ERRNO */

	#ifndef MATH_ERREXCEPT
	#define MATH_ERREXCEPT	2
	#endif /* MATH_ERREXCEPT */

	#ifndef math_errhandling
	#define math_errhandling _EWL_MATH_ERRHANDLING
	#endif /* math_errhandling */
#endif /* _EWL_C99 */

#if _EWL_BUILTIN_MATH_VALS

	#ifndef	HUGE_VAL
	#define HUGE_VAL (__builtin_huge_val())
	#endif

	#if _EWL_C99 || _EWL_C_HAS_CPP_EXTENSIONS
		#ifndef HUGE_VALF
		#define HUGE_VALF (__builtin_huge_valf())
		#endif
		
		#ifndef INFINITY
		#define INFINITY (__builtin_inff())
		#endif
	#endif

	#if _EWL_C99 || _EWL_C99_MATH_LEAK
		#ifndef HUGE_VALL
		#define HUGE_VALL (__builtin_huge_vall())
		#endif
	#endif

	#if _EWL_C99 || _EWL_USES_SUN_MATH_LIB
		#ifndef NAN
		#define NAN (__builtin_nanf(""))
		#endif
	#endif

#endif /* _EWL_BUILTIN_MATH_VALS */

_EWL_BEGIN_EXTERN_C

	#ifndef	HUGE_VAL
	#if _GCCPORT_
		extern _EWL_IMP_EXP int32_t __double_huge[2];
	#else
		extern _EWL_IMP_EXP int32_t __double_huge[];
	#endif
	#define HUGE_VAL  (_MISRA_EXCEPTION_FLOAT_CAST() *(double *)__double_huge)
	#endif

_EWL_END_EXTERN_C

#if _EWL_C99 || _EWL_C_HAS_CPP_EXTENSIONS

_EWL_BEGIN_EXTERN_C

	#if _GCCPORT_
		extern _EWL_IMP_EXP int32_t __float_huge[1];
	#else
		extern _EWL_IMP_EXP int32_t __float_huge[];
	#endif

	#ifndef HUGE_VALF
	#define HUGE_VALF (_MISRA_EXCEPTION_FLOAT_CAST() *(float *)__float_huge)
	#endif

	#ifndef INFINITY
	#define INFINITY  (_MISRA_EXCEPTION_FLOAT_CAST() *(float *)__float_huge)
	#endif

	extern _EWL_IMP_EXP_C int _EWL_MATH_CDECL __signbitf(float x) _EWL_CANT_THROW;
	extern _EWL_IMP_EXP_C int _EWL_MATH_CDECL __signbitd(double x) _EWL_CANT_THROW;
	extern _EWL_IMP_EXP_C int _EWL_MATH_CDECL __signbit(long double x) _EWL_CANT_THROW;

_EWL_END_EXTERN_C

	#define signbit(x) \
		 ((sizeof(x) == sizeof(float))  ? __signbitf((float)(x)) \
		:((sizeof(x) == sizeof(double)) ? __signbitd((double)(x)) \
		:                     			  __signbit((long double)(x))))
#endif /* _EWL_C99 || _EWL_C_HAS_CPP_EXTENSIONS */

#if _EWL_C99 || _EWL_USES_SUN_MATH_LIB

_EWL_BEGIN_EXTERN_C

	#ifndef NAN
	#if _GCCPORT_
		extern _EWL_IMP_EXP int32_t __float_nan[1];
	#else
		extern _EWL_IMP_EXP int32_t __float_nan[];
	#endif
	#define NAN       (_MISRA_EXCEPTION_FLOAT_CAST() *(float*)__float_nan)
	#endif

	extern _EWL_IMP_EXP_C int _EWL_MATH_CDECL __fpclassifyf(float x) _EWL_CANT_THROW;
	extern _EWL_IMP_EXP_C int _EWL_MATH_CDECL __fpclassifyd(double x) _EWL_CANT_THROW;
	extern _EWL_IMP_EXP_C int _EWL_MATH_CDECL __fpclassifyl(long double x) _EWL_CANT_THROW;

_EWL_END_EXTERN_C

#if _GCCPORT_
	#define fpclassify(x)  \
		 	((sizeof(x) == sizeof(float))  ? __fpclassifyf((float)(x))  : \
		 	((sizeof(x) == sizeof(double)) ? __fpclassifyd((double)(x)) : \
									__fpclassifyd((long double)(x))))
#else
	#define fpclassify(x)  \
		 	((sizeof(x) == sizeof(float))  ? __fpclassifyf((float)(x))  : \
		 	((sizeof(x) == sizeof(double)) ? __fpclassifyd((double)(x)) : \
									__fpclassifyl((long double)(x))))
#endif

#endif /* _EWL_C99 || _EWL_USES_SUN_MATH_LIB */

#if _EWL_C99 || _EWL_C99_MATH_LEAK

_EWL_BEGIN_EXTERN_C

	#ifndef HUGE_VALL
	#if _GCCPORT_
		extern _EWL_IMP_EXP int32_t __extended_huge[2];
	#else
		extern _EWL_IMP_EXP int32_t __extended_huge[];
	#endif
	#define HUGE_VALL (_MISRA_EXCEPTION_FLOAT_CAST() *(long double*)__extended_huge)
	#endif

_EWL_END_EXTERN_C

#endif /* _EWL_C99 */

#if _EWL_C99 || _EWL_USES_SUN_MATH_LIB

	#define isnormal(x) (fpclassify(x) == FP_NORMAL)
	#define isnan(x)    (fpclassify(x) == FP_NAN)
	#define isinf(x)    (fpclassify(x) == FP_INFINITE)
	#define isfinite(x) ((fpclassify(x) > FP_INFINITE))

#endif /* _EWL_C99 || _EWL_USES_SUN_MATH_LIB */

#if _EWL_C99 || _EWL_C99_MATH_LEAK

_EWL_BEGIN_EXTERN_C

#if defined(__INTEL__)

	#define __EQUAL 0x4000
	#define __GREATERTHAN 0
	#define __LESSTHAN 0x0100
	#define __UNORDERED 0x4500

	#define isgreater(x, y)      (!__ewl_relation(x, y))
	#define isgreaterequal(x, y) (!((__ewl_relation(x, y)>>8) & 1))
	#define isless(x, y)         (__ewl_relation(x, y) == __LESSTHAN)
	#define islessequal(x, y)    ((__ewl_relation(x, y)%__UNORDERED) != 0)
	#define islessgreater(x, y)  (__ewl_relation(x, y) <= __LESSTHAN)
	#define isunordered(x, y)    (__ewl_relation(x, y) == __UNORDERED)

#elif _EWL_USES_SUN_MATH_LIB

	short __ewl_relation(double x, double y) _EWL_CANT_THROW;

	#define isgreater(x, y) 		(__ewl_relation(x, y) == 0)
	#define isgreaterequal(x, y)	(__ewl_relation(x, y) % 2 == 0)
	#define isless(x, y)			(__ewl_relation(x, y) == 1)
	#define islessequal(x, y)		((__ewl_relation(x, y)+1)/2 == 1)
	#define islessgreater(x, y)		(__ewl_relation(x, y) <= 1)
	#define isunordered(x, y)		(__ewl_relation(x, y) == 3)

#endif /* __INTEL__ */

_EWL_END_EXTERN_C

#endif /* _EWL_C99 */

#ifndef _EWL_NO_MATH_LIB

/************************/
/*						*/
/* 	Standard functions	*/
/*						*/
/************************/

_EWL_BEGIN_NAMESPACE_STD
_EWL_BEGIN_EXTERN_C

	/* double entry points */

	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL acos(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL asin(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL atan(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL atan2(double, double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL ceil(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL cos(double)  _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL cosh(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL exp(double)  _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL floor(double) _EWL_CANT_THROW;

#if __dest_os !=  __emb_coldfire
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL fabs(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL fmod(double, double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL sqrt(double) _EWL_CANT_THROW;
#endif

	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL frexp(double, int*) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL ldexp(double, int)  _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL log(double)   _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL log10(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL modf(double, double*) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL pow(double, double)  _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL sin(double)  _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL sinh(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL tan(double)  _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL tanh(double) _EWL_CANT_THROW;

#if __dest_os != __starcore

#if _EWL_C99 || _EWL_USES_SUN_MATH_LIB
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL copysign(double, double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL expm1(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL rint(double)  _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL scalbn(double, int) _EWL_CANT_THROW;
#endif

#if _EWL_C99 || _EWL_C99_MATH_LEAK
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL acosh(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL asinh(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL atanh(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL cbrt(double)  _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL erf(double)   _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL erfc(double)  _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL exp2(double)  _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL fdim(double, double) _EWL_CANT_THROW;

	#if __has_intrinsic(__builtin_fma)
		#define FAST_FMA 1
		#define FAST_FMAL 1

		_EWL_INLINE _EWL_IMP_EXP_C double _EWL_MATH_CDECL fma(double, double, double) _EWL_CANT_THROW;
		_EWL_INLINE _EWL_IMP_EXP_C double _EWL_MATH_CDECL fma(double x, double y, double z) _EWL_CANT_THROW
		{
			return __builtin_fma(x, y, z);
		}
	#else
		_EWL_IMP_EXP_C double _EWL_MATH_CDECL fma(double, double, double) _EWL_CANT_THROW;
	#endif /* __has_intrinsic(__builtin_fma) */

	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL fmax(double, double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL fmin(double, double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL hypot(double, double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  int         _EWL_MATH_CDECL ilogb(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL lgamma(double) _EWL_CANT_THROW;

	#if _EWL_LONGLONG
	_EWL_IMP_EXP_C  long long   _EWL_MATH_CDECL llrint(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long long   _EWL_MATH_CDECL llround(double) _EWL_CANT_THROW;
	#endif /* _EWL_LONGLONG */

	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL log1p(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL log2(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL logb(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long        _EWL_MATH_CDECL lrint(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long        _EWL_MATH_CDECL lround(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL nan(const char*) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL nearbyint(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL nextafter(double, double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL nexttoward(double, long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL remainder(double, double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL remquo(double, double, int*) _EWL_CANT_THROW;

	#if __has_intrinsic(__builtin_round)
		_EWL_IMP_EXP_C  short      _EWL_MATH_CDECL round(long) _EWL_CANT_THROW;
		_EWL_INLINE _EWL_IMP_EXP_C short _EWL_MATH_CDECL round(long x) _EWL_CANT_THROW
			{ return __builtin_round(x); }
	#else
		_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL round(double) _EWL_CANT_THROW;
	#endif /* __has_intrinsic(__builtin_round) */

	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL scalbln(double, long int) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL tgamma(double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  double      _EWL_MATH_CDECL trunc(double) _EWL_CANT_THROW;
#endif /* _EWL_C99 */

	/* float entry points */
	
#if _EWL_C99 || _EWL_C99_MATH_LEAK || (_EWL_USES_SUN_SP_MATH_LIB && _EWL_ONLY_SINGLE_PRECISION_MATH_LIB)
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL copysignf(float, float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL expm1f(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL rintf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL scalbnf(float, int) _EWL_CANT_THROW;
#endif

#if _EWL_C99 || _EWL_C99_MATH_LEAK || _EWL_C_HAS_CPP_EXTENSIONS
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL acosf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL asinf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL atanf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL atan2f(float, float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL ceilf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL cosf(float)  _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL coshf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL expf(float)  _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL fabsf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL floorf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL fmodf(float, float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL frexpf(float, int*) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL ldexpf(float, int)  _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL logf(float)   _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL log10f(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL modff(float, float*) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL powf(float, float)   _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL sinf(float)  _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL sinhf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL sqrtf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL tanf(float)  _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL tanhf(float) _EWL_CANT_THROW;
#endif /* _EWL_C99 || _EWL_C_HAS_CPP_EXTENSIONS */

#if _EWL_C99 || _EWL_C99_MATH_LEAK
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL acoshf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL asinhf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL atanhf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL cbrtf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL erff(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL erfcf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL exp2f(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL fdimf(float, float) _EWL_CANT_THROW;

	#if __has_intrinsic(__builtin_fmaf)
		#define FAST_FMAF 1

		_EWL_INLINE _EWL_IMP_EXP_C float _EWL_MATH_CDECL fmaf(float, float, float) _EWL_CANT_THROW;
		_EWL_INLINE _EWL_IMP_EXP_C float _EWL_MATH_CDECL fmaf(float x, float y, float z) _EWL_CANT_THROW
		{
			return __builtin_fmaf(x, y, z);
		}
	#else
		_EWL_IMP_EXP_C float _EWL_MATH_CDECL fmaf(float, float, float) _EWL_CANT_THROW;
	#endif /* __has_intrinsic(__builtin_fmaf) */

	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL fmaxf(float, float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL fminf(float, float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL hypotf(float, float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  int         _EWL_MATH_CDECL ilogbf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL lgammaf(float) _EWL_CANT_THROW;
	#if _EWL_LONGLONG
	_EWL_IMP_EXP_C  long long   _EWL_MATH_CDECL llrintf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long long   _EWL_MATH_CDECL llroundf(float) _EWL_CANT_THROW;
	#endif /* _EWL_LONGLONG */

	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL log1pf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL log2f(float)  _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL logbf(float)  _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long        _EWL_MATH_CDECL lrintf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long        _EWL_MATH_CDECL lroundf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL nanf(const char*) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL nearbyintf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL nextafterf(float, float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL nexttowardf(float, long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL remainderf(float, float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL remquof(float, float, int*) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL roundf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL scalblnf(float, long int) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL tgammaf(float) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  float       _EWL_MATH_CDECL truncf(float) _EWL_CANT_THROW;
#endif /* _EWL_C99 */

	/* long double entry points */

#if _EWL_C99 || _EWL_C99_MATH_LEAK || _EWL_C_HAS_CPP_EXTENSIONS
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL acosl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL asinl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL atanl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL atan2l(long double, long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL ceill(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL cosl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL coshl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL expl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL fabsl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL floorl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL fmodl(long double, long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL frexpl(long double, int*) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL ldexpl(long double, int) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL logl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL log10l(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL modfl(long double, long double*) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL powl(long double, long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL sinl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL sinhl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL sqrtl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL tanl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL tanhl(long double) _EWL_CANT_THROW;
#endif /* _EWL_C99 || _EWL_C_HAS_CPP_EXTENSIONS */

#if _EWL_C99 || _EWL_C99_MATH_LEAK
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL acoshl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL asinhl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL atanhl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL cbrtl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL copysignl(long double, long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL erfl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL erfcl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL exp2l(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL expm1l(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL fdiml(long double, long double) _EWL_CANT_THROW;

	#if _EWL_LONGLONG
		#if _GCCPORT_
		_EWL_INLINE _EWL_IMP_EXP_C long double _EWL_MATH_CDECL _EWL_CANT_THROW fmal(long double x, long double y, long double z); // Moved _EWL_CANT_THROW attribute
		#else
		_EWL_INLINE _EWL_IMP_EXP_C long double _EWL_MATH_CDECL fmal(long double x, long double y, long double z) _EWL_CANT_THROW ;
		#endif
		#if !_EWL_ONLY_SINGLE_PRECISION_MATH_LIB
			#if _GCCPORT_
			_EWL_INLINE _EWL_IMP_EXP_C long double _EWL_MATH_CDECL _EWL_CANT_THROW fmal(long double x, long double y, long double z) // Moved _EWL_CANT_THROW attribute
			#else
			_EWL_INLINE _EWL_IMP_EXP_C long double _EWL_MATH_CDECL fmal(long double x, long double y, long double z) _EWL_CANT_THROW
			#endif
			{
				return fma((double) x, (double) y, (double) z);
			}
		#endif
	#endif

	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL fmaxl(long double, long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL fminl(long double, long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL hypotl(long double, long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  int         _EWL_MATH_CDECL ilogbl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL lgammal(long double) _EWL_CANT_THROW;

	#if _EWL_LONGLONG
	_EWL_IMP_EXP_C  long long   _EWL_MATH_CDECL llrintl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long long   _EWL_MATH_CDECL llroundl(long double) _EWL_CANT_THROW;
	#endif /* _EWL_LONGLONG */

	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL log1pl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL log2l(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL logbl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long        _EWL_MATH_CDECL lrintl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long        _EWL_MATH_CDECL lroundl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL nanl(const char*) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL nearbyintl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL nextafterl(long double, long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL nexttowardl(long double, long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL remainderl(long double, long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL remquol(long double, long double, int*) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL rintl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL roundl(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL scalblnl(long double, long int) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL scalbnl(long double, int) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL tgammal(long double) _EWL_CANT_THROW;
	_EWL_IMP_EXP_C  long double _EWL_MATH_CDECL truncl(long double) _EWL_CANT_THROW;
#endif /* _EWL_C99 */

#endif /* __dest_os == __starcore */

#undef _EWL_USING

_EWL_END_EXTERN_C
_EWL_END_NAMESPACE_STD

#if __dest_os ==  __emb_coldfire
	#include <coldfire/cmath_coldfire.h>
#elif __dest_os ==  __starcore
	#include <sc/cmath_StarCore.h>
#endif

#ifdef __cplusplus	/* C++ overloads, as per 26.5 */

	#ifdef __ANSI_OVERLOAD__

	_EWL_BEGIN_NAMESPACE_STD

	#if _EWL_C99 || _EWL_C_HAS_CPP_EXTENSIONS
	__inline float       _EWL_MATH_CDECL acos(float x) _EWL_CANT_THROW  { return (acosf)((x)); }
	__inline float       _EWL_MATH_CDECL asin(float x) _EWL_CANT_THROW  { return (asinf)((x)); }
	__inline float       _EWL_MATH_CDECL atan(float x) _EWL_CANT_THROW  { return (atanf)((x)); }
	__inline float       _EWL_MATH_CDECL atan2(float y, float x) _EWL_CANT_THROW  { return (atan2f)((y), (x)); }
	__inline float       _EWL_MATH_CDECL ceil(float x) _EWL_CANT_THROW  { return (ceilf)((x)); }
	__inline float       _EWL_MATH_CDECL cos(float x)  _EWL_CANT_THROW  { return (cosf)((x)); }
	__inline float       _EWL_MATH_CDECL cosh(float x) _EWL_CANT_THROW  { return (coshf)((x)); }
	__inline float       _EWL_MATH_CDECL exp(float x)  _EWL_CANT_THROW  { return (expf)((x)); }

	#if __dest_os !=  __emb_coldfire
	__inline float       _EWL_MATH_CDECL fabs(float x) _EWL_CANT_THROW  { return (fabsf)((x)); }
	__inline float       _EWL_MATH_CDECL fmod(float x, float y) _EWL_CANT_THROW  { return (fmodf)((x), (y)); }
	__inline float       _EWL_MATH_CDECL sqrt(float x) _EWL_CANT_THROW  { return (sqrtf)((x)); }
	#endif

	__inline float       _EWL_MATH_CDECL floor(float x) _EWL_CANT_THROW  { return (floorf)((x)); }
	__inline float       _EWL_MATH_CDECL frexp(float x, int* y) _EWL_CANT_THROW  { return (frexpf)((x), (y)); }
	__inline float       _EWL_MATH_CDECL ldexp(float x, int y) _EWL_CANT_THROW  { return (ldexpf)((x), (y)); }
	__inline float       _EWL_MATH_CDECL log(float x) _EWL_CANT_THROW  { return (logf)((x)); }
	__inline float       _EWL_MATH_CDECL log10(float x) _EWL_CANT_THROW  { return (log10f)((x)); }

	__inline float _EWL_MATH_CDECL modf(float x, float* iptr) _EWL_CANT_THROW
		{
		  double iptrd;
		  float result = (float)modf((double)x, &iptrd);
		  *iptr = (float)iptrd;
		  return result;
		}

	__inline float       _EWL_MATH_CDECL pow(float x, float y) _EWL_CANT_THROW  { return (powf)((x), (y)); }
	__inline float       _EWL_MATH_CDECL sin(float x) _EWL_CANT_THROW  { return (sinf)((x)); }
	__inline float       _EWL_MATH_CDECL sinh(float x) _EWL_CANT_THROW  { return (sinhf)((x)); }
	__inline float       _EWL_MATH_CDECL tan(float x) _EWL_CANT_THROW  { return (tanf)((x)); }
	__inline float       _EWL_MATH_CDECL tanh(float x) _EWL_CANT_THROW  { return (tanhf)((x)); }
	#endif /* _EWL_C99 || _EWL_C_HAS_CPP_EXTENSIONS */

	#if (_EWL_C99 || _EWL_C99_MATH_LEAK) && __dest_os != __starcore
	__inline float       _EWL_MATH_CDECL acosh(float x) _EWL_CANT_THROW  { return (acoshf)((x)); }
	__inline float       _EWL_MATH_CDECL asinh(float x) _EWL_CANT_THROW  { return (asinhf)((x)); }
	__inline float       _EWL_MATH_CDECL atanh(float x) _EWL_CANT_THROW  { return (atanhf)((x)); }
	__inline float       _EWL_MATH_CDECL cbrt(float x)  _EWL_CANT_THROW  { return (cbrtf)((x)); }
	__inline float       _EWL_MATH_CDECL copysign(float x,float y) _EWL_CANT_THROW  { return (copysignf)((x), (y)); }
	__inline float       _EWL_MATH_CDECL erf(float x)  _EWL_CANT_THROW  { return (erff)((x)); }
	__inline float       _EWL_MATH_CDECL erfc(float x) _EWL_CANT_THROW  { return (erfcf)((x)); }
	__inline float       _EWL_MATH_CDECL exp2(float x) _EWL_CANT_THROW  { return (exp2f)((x)); }
	__inline float       _EWL_MATH_CDECL expm1(float x) _EWL_CANT_THROW { return (expm1f)((x)); }
	__inline float       _EWL_MATH_CDECL fdim(float x, float y) _EWL_CANT_THROW  { return (fdimf)((x), (y)); }
	__inline float       _EWL_MATH_CDECL fma(float x, float y, float z) _EWL_CANT_THROW  { return (fmaf)((x), (y), (z)); }
	__inline float       _EWL_MATH_CDECL fmax(float x, float y) _EWL_CANT_THROW  { return (fmaxf)((x), (y)); }
	__inline float       _EWL_MATH_CDECL fmin(float x, float y) _EWL_CANT_THROW  { return (fminf)((x), (y)); }
	__inline float       _EWL_MATH_CDECL hypot(float x, float y) _EWL_CANT_THROW { return (hypotf)((x), (y)); }
	__inline int         _EWL_MATH_CDECL ilogb(float x) _EWL_CANT_THROW  { return (ilogbf)((x)); }
	__inline float       _EWL_MATH_CDECL lgamma(float x) _EWL_CANT_THROW { return (lgammaf)((x)); }
	#if _EWL_LONGLONG
	__inline long long   _EWL_MATH_CDECL llrint(float x) _EWL_CANT_THROW  { return (llrintf)((x)); }
	__inline long long   _EWL_MATH_CDECL llround(float x) _EWL_CANT_THROW { return (llroundf)((x)); }
	#endif /* _EWL_LONGLONG */
	__inline float       _EWL_MATH_CDECL log1p(float x) _EWL_CANT_THROW  { return (log1pf)((x)); }
	__inline float       _EWL_MATH_CDECL log2(float x)  _EWL_CANT_THROW  { return (log2f)((x)); }
	__inline float       _EWL_MATH_CDECL logb(float x)  _EWL_CANT_THROW  { return (logbf)((x)); }
	__inline long        _EWL_MATH_CDECL lrint(float x) _EWL_CANT_THROW  { return (lrintf)((x)); }
	__inline long        _EWL_MATH_CDECL lround(float x) _EWL_CANT_THROW { return (lroundf)((x)); }
	__inline float       _EWL_MATH_CDECL nearbyint(float x) _EWL_CANT_THROW  { return (nearbyintf)((x)); }
	__inline float       _EWL_MATH_CDECL nextafter(float x, float y) _EWL_CANT_THROW  { return (nextafterf)((x), (y)); }
	__inline float       _EWL_MATH_CDECL nexttoward(float x, long double y) _EWL_CANT_THROW  { return (nexttowardf)((x), (y)); }
	__inline float       _EWL_MATH_CDECL remainder(float x, float y) _EWL_CANT_THROW  { return (remainderf)((x), (y)); }
	__inline float       _EWL_MATH_CDECL remquo(float x, float y, int* z) _EWL_CANT_THROW  { return (remquof)((x), (y), (z)); }
	__inline float       _EWL_MATH_CDECL rint(float x)  _EWL_CANT_THROW  { return (rintf)((x)); }
	__inline float       _EWL_MATH_CDECL round(float x) _EWL_CANT_THROW  { return (roundf)((x)); }
	__inline float       _EWL_MATH_CDECL scalbln(float x, long int y) _EWL_CANT_THROW  { return (scalblnf)((x), (y)); }
	__inline float       _EWL_MATH_CDECL scalbn(float x, int y) _EWL_CANT_THROW  { return (scalbnf)((x), (y)); }
	__inline float       _EWL_MATH_CDECL tgamma(float x) _EWL_CANT_THROW  { return (tgammaf)((x)); }
	__inline float       _EWL_MATH_CDECL trunc(float x)  _EWL_CANT_THROW  { return (truncf)((x)); }
	#endif /* _EWL_C99 */

	#if _EWL_C99 || _EWL_C_HAS_CPP_EXTENSIONS
	__inline long double _EWL_MATH_CDECL acos(long double x) _EWL_CANT_THROW  { return (acosl)((x)); }
	__inline long double _EWL_MATH_CDECL asin(long double x) _EWL_CANT_THROW  { return (asinl)((x)); }
	__inline long double _EWL_MATH_CDECL atan(long double x) _EWL_CANT_THROW  { return (atanl)((x)); }
	__inline long double _EWL_MATH_CDECL atan2(long double y, long double x) _EWL_CANT_THROW  { return (atan2l)((y), (x)); }
	__inline long double _EWL_MATH_CDECL ceil(long double x) _EWL_CANT_THROW  { return (ceill)((x)); }
	__inline long double _EWL_MATH_CDECL cos(long double x)  _EWL_CANT_THROW  { return (cosl)((x)); }
	__inline long double _EWL_MATH_CDECL cosh(long double x) _EWL_CANT_THROW  { return (coshl)((x)); }
	__inline long double _EWL_MATH_CDECL exp(long double x)  _EWL_CANT_THROW  { return (expl)((x)); }

	#if __dest_os !=  __emb_coldfire
	__inline long double _EWL_MATH_CDECL fabs(long double x) _EWL_CANT_THROW  { return (fabsl)((x)); }
	__inline long double _EWL_MATH_CDECL fmod(long double x, long double y) _EWL_CANT_THROW  { return (fmodl)((x), (y)); }
	__inline long double _EWL_MATH_CDECL sqrt(long double x) _EWL_CANT_THROW  { return (sqrtl)((x)); }
	#endif

	__inline long double _EWL_MATH_CDECL floor(long double x) _EWL_CANT_THROW  { return (floorl)((x)); }
	__inline long double _EWL_MATH_CDECL frexp(long double x, int* y) _EWL_CANT_THROW  { return (frexpl)((x), (y)); }
	__inline long double _EWL_MATH_CDECL ldexp(long double x, int y) _EWL_CANT_THROW  { return (ldexpl)((x), (y)); }
	__inline long double _EWL_MATH_CDECL log(long double x)   _EWL_CANT_THROW  { return (logl)((x)); }
	__inline long double _EWL_MATH_CDECL log10(long double x) _EWL_CANT_THROW  { return (log10l)((x)); }

	__inline long double _EWL_MATH_CDECL modf(long double x, long double* iptr) _EWL_CANT_THROW
	    {
		  double iptrd;
		  long double result = (long double)modf((double)x, &iptrd);
		  *iptr = (long double)iptrd;
		  return result;
		}

	__inline long double _EWL_MATH_CDECL pow(long double x, long double y) _EWL_CANT_THROW  { return (powl)((x), (y)); }
	__inline long double _EWL_MATH_CDECL sin(long double x) _EWL_CANT_THROW  { return (sinl)((x)); }
	__inline long double _EWL_MATH_CDECL sinh(long double x) _EWL_CANT_THROW  { return (sinhl)((x)); }
	__inline long double _EWL_MATH_CDECL tan(long double x) _EWL_CANT_THROW  { return (tanl)((x)); }
	__inline long double _EWL_MATH_CDECL tanh(long double x) _EWL_CANT_THROW  { return (tanhl)((x)); }
	#endif /* _EWL_C99 || _EWL_C_HAS_CPP_EXTENSIONS */

	#if (_EWL_C99 || _EWL_C99_MATH_LEAK) && __dest_os != __starcore
	__inline long double _EWL_MATH_CDECL acosh(long double x) _EWL_CANT_THROW  { return (acoshl)((x)); }
	__inline long double _EWL_MATH_CDECL asinh(long double x) _EWL_CANT_THROW  { return (asinhl)((x)); }
	__inline long double _EWL_MATH_CDECL atanh(long double x) _EWL_CANT_THROW  { return (atanhl)((x)); }
	__inline long double _EWL_MATH_CDECL cbrt(long double x) _EWL_CANT_THROW  { return (cbrtl)((x)); }
	__inline long double _EWL_MATH_CDECL copysign(long double x, long double y) _EWL_CANT_THROW  { return (copysignl)((x), (y)); }
	__inline long double _EWL_MATH_CDECL erf(long double x) _EWL_CANT_THROW  { return (erfl)((x)); }
	__inline long double _EWL_MATH_CDECL erfc(long double x) _EWL_CANT_THROW  { return (erfcl)((x)); }
	__inline long double _EWL_MATH_CDECL exp2(long double x) _EWL_CANT_THROW  { return (exp2l)((x)); }
	__inline long double _EWL_MATH_CDECL expm1(long double x) _EWL_CANT_THROW  { return (expm1l)((x)); }
	__inline long double _EWL_MATH_CDECL fdim(long double x, long double y) _EWL_CANT_THROW  { return (fdiml)((x), (y)); }
	__inline long double _EWL_MATH_CDECL fma(long double x, long double y, long double z) _EWL_CANT_THROW  { return (fmal)((x), (y), (z)); }
	__inline long double _EWL_MATH_CDECL fmax(long double x, long double y) _EWL_CANT_THROW  { return (fmaxl)((x), (y)); }
	__inline long double _EWL_MATH_CDECL fmin(long double x, long double y) _EWL_CANT_THROW  { return (fminl)((x), (y)); }
	__inline long double _EWL_MATH_CDECL hypot(long double x, long double y) _EWL_CANT_THROW  { return (hypotl)((x), (y)); }
	__inline int         _EWL_MATH_CDECL ilogb(long double x) _EWL_CANT_THROW  { return (ilogbl)((x)); }
	__inline long double _EWL_MATH_CDECL lgamma(long double x) _EWL_CANT_THROW  { return (lgammal)((x)); }
	#if _EWL_LONGLONG
	__inline long long   _EWL_MATH_CDECL llrint(long double x) _EWL_CANT_THROW  { return (llrintl)((x)); }
	__inline long long   _EWL_MATH_CDECL llround(long double x) _EWL_CANT_THROW  { return (llroundl)((x)); }
	#endif /* _EWL_LONGLONG */
	__inline long double _EWL_MATH_CDECL log1p(long double x) _EWL_CANT_THROW  { return (log1pl)((x)); }
	__inline long double _EWL_MATH_CDECL log2(long double x) _EWL_CANT_THROW  { return (log2l)((x)); }
	__inline long double _EWL_MATH_CDECL logb(long double x) _EWL_CANT_THROW  { return (logbl)((x)); }
	__inline long        _EWL_MATH_CDECL lrint(long double x) _EWL_CANT_THROW  { return (lrintl)((x)); }
	__inline long        _EWL_MATH_CDECL lround(long double x) _EWL_CANT_THROW  { return (lroundl)((x)); }
	__inline long double _EWL_MATH_CDECL nearbyint(long double x) _EWL_CANT_THROW  { return (nearbyintl)((x)); }
	__inline long double _EWL_MATH_CDECL nextafter(long double x, long double y) _EWL_CANT_THROW  { return (nextafterl)((x), (y)); }
	__inline long double _EWL_MATH_CDECL nexttoward(long double x, long double y) _EWL_CANT_THROW  { return (nexttowardl)((x), (y)); }
	__inline long double _EWL_MATH_CDECL remainder(long double x, long double y) _EWL_CANT_THROW  { return (remainderl)((x), (y)); }
	__inline long double _EWL_MATH_CDECL remquo(long double x, long double y, int* z) _EWL_CANT_THROW  { return (remquol)((x), (y), (z)); }
	__inline long double _EWL_MATH_CDECL rint(long double x) _EWL_CANT_THROW  { return (rintl)((x)); }
	__inline long double _EWL_MATH_CDECL round(long double x) _EWL_CANT_THROW  { return (roundl)((x)); }
	__inline long double _EWL_MATH_CDECL scalbln(long double x, long int y) _EWL_CANT_THROW  { return (scalblnl)((x), (y)); }
	__inline long double _EWL_MATH_CDECL scalbn(long double x, int y) _EWL_CANT_THROW  { return (scalbnl)((x), (y)); }
	__inline long double _EWL_MATH_CDECL tgamma(long double x) _EWL_CANT_THROW  { return (tgammal)((x)); }
	__inline long double _EWL_MATH_CDECL trunc(long double x) _EWL_CANT_THROW  { return (truncl)((x)); }
	#endif /* _EWL_C99 */

	_EWL_END_NAMESPACE_STD

	#endif /*__ANSI_OVERLOAD__*/

	#ifdef _EWL_INTEGRAL_MATH
		#include "math_integral.h"
	#endif /* _EWL_INTEGRAL_MATH */

	#ifdef __ANSI_OVERLOAD__

	_EWL_BEGIN_NAMESPACE_STD

		/* special pow() overloads */
		__inline float       _EWL_MATH_CDECL pow(float x, int y)  _EWL_CANT_THROW { return (powf)((x), (float)(y)); }
		__inline double      _EWL_MATH_CDECL pow(double x, int y)  _EWL_CANT_THROW { return (pow)((x), (double)(y)); }
		__inline long double _EWL_MATH_CDECL pow(long double x, int y)  _EWL_CANT_THROW { return (powl)((x), (long double)(y)); }

		/* special abs() functions */
		__inline float       _EWL_MATH_CDECL abs(float x) _EWL_CANT_THROW { return (fabsf)((x)); }
		__inline double      _EWL_MATH_CDECL abs(double x) _EWL_CANT_THROW { return (fabs)((x)); }
		__inline long double _EWL_MATH_CDECL abs(long double x) _EWL_CANT_THROW { return (fabsl)((x)); }

	_EWL_END_NAMESPACE_STD

	#endif /*__ANSI_OVERLOAD__*/

	// TR1 overloads

	_EWL_BEGIN_NAMESPACE_STD
#if _EWL_TR1_NAMESPACE
	namespace tr1
	{
#endif

	namespace detail
	{
	  template <class T> bool signbit_impl(T value) { return signbit(value); }
	  #undef signbit

	  template <class T> bool isfinite_impl(T value) { return isfinite(value); }
	  #undef isfinite

	  template <class T> bool isinf_impl(T value) { return isinf(value); }
	  #undef isinf

	  template <class T> bool isnan_impl(T value) { return isnan(value); }
	  #undef isnan

	  template <class T> bool isnormal_impl(T value) { return isnormal(value); }
	  #undef isnormal

	  template <class T> bool isgreater_impl(T x, T y) { return isgreater(x, y); }
	  #undef isgreater

	  template <class T> bool isgreaterequal_impl(T x, T y) { return isgreaterequal(x, y); }
	  #undef isgreaterequal

	  template <class T> bool isless_impl(T x, T y) { return isless(x, y); }
	  #undef isless

	  template <class T> bool islessequal_impl(T x, T y) { return islessequal(x, y); }
	  #undef islessequal

	  template <class T> bool islessgreater_impl(T x, T y) { return islessgreater(x, y); }
	  #undef islessgreater

	  template <class T> bool isunordered_impl(T x, T y) { return isunordered(x, y); }
	  #undef isunordered

	  template <class T> bool fpclassify_impl(T value) { return fpclassify(value); }
	  #undef fpclassify
	}

	template <class T> bool signbit(T x) { return detail::signbit_impl(x); }
	template <class T> int fpclassify(T x) { return detail::fpclassify_impl(x); }
	template <class T> bool isfinite(T x) { return detail::isfinite_impl(x); }
	template <class T> bool isinf(T x) { return detail::isinf_impl(x); }
	template <class T> bool isnan(T x) { return detail::isnan_impl(x); }
	template <class T> bool isnormal(T x) { return detail::isnormal_impl(x); }
	template <class T> bool isgreater(T x, T y) { return detail::isgreater_impl(x, y); }
	template <class T> bool isgreaterequal(T x, T y) { return detail::isgreaterequal_impl(x, y); }
	template <class T> bool isless(T x, T y) { return detail::isless_impl(x, y); }
	template <class T> bool islessequal(T x, T y) { return detail::islessequal_impl(x, y); }
	template <class T> bool islessgreater(T x, T y) { return detail::islessgreater_impl(x, y); }
	template <class T> bool isunordered(T x, T y) { return detail::isunordered_impl(x, y); }

#if _EWL_TR1_NAMESPACE

#if (_EWL_C99 || _EWL_C99_MATH_LEAK) && __dest_os != __starcore
	using __std(acoshf);
	using __std(acoshl);
	using __std(asinhf);
	using __std(asinhl);
	using __std(atanhf);
	using __std(atanhl);
	using __std(cbrtf);
	using __std(cbrtl);
	using __std(copysignf);
	using __std(copysignl);
	using __std(erff);
	using __std(erfl);
	using __std(erfcf);
	using __std(erfcl);
	using __std(exp2f);
	using __std(exp2l);
	using __std(expm1f);
	using __std(expm1l);
	using __std(fdimf);
	using __std(fdiml);
	using __std(fmaf);
	using __std(fmal);
	using __std(fmaxf);
	using __std(fmaxl);
	using __std(hypotf);
	using __std(hypotl);
	using __std(ilogbf);
	using __std(ilogbl);
	using __std(lgammaf);
	using __std(lgammal);
	using __std(llrintf);
	using __std(llrintl);
	using __std(fminf);
	using __std(fminl);
	using __std(llroundf);
	using __std(llroundl);
	using __std(log1pf);
	using __std(log1pl);
	using __std(log2f);
	using __std(log2l);
	using __std(logbf);
	using __std(logbl);
	using __std(lrintf);
	using __std(lrintl);
	using __std(lroundf);
	using __std(lroundl);
	using __std(nan);
	using __std(nanf);
	using __std(nanl);
	using __std(nearbyintf);
	using __std(nearbyintl);
	using __std(nextafterf);
	using __std(nextafterl);
	using __std(nexttowardf);
	using __std(nexttowardl);
	using __std(remainderf);
	using __std(remainderl);
	using __std(remquof);
	using __std(remquol);
	using __std(rintf);
	using __std(rintl);
	using __std(round);
	using __std(roundf);
	using __std(roundl);
	using __std(scalbln);
	using __std(scalblnf);
	using __std(scalblnl);
	using __std(scalbnf);
	using __std(scalbnl);
	using __std(scalbnf);
	using __std(scalbnl);
	using __std(tgammaf);
	using __std(tgammal);
	using __std(truncf);
	using __std(truncl);
#endif
	using __std(acosh);
	using __std(asinh);
	using __std(atanh);
	using __std(cbrt);
	using __std(copysign);
	using __std(erf);
	using __std(erfc);
	using __std(exp2);
	using __std(expm1);
	using __std(fdim);
	using __std(fma);
	using __std(fmax);
	using __std(fmin);
	using __std(hypot);
	using __std(ilogb);
	using __std(lgamma);
#if __dest_os != __starcore
	using __std(llrint);
	using __std(llround);
#endif /* __dest_os != __starcore */
	using __std(log1p);
	using __std(log2);
	using __std(logb);
	using __std(lrint);
	using __std(lround);
	using __std(nearbyint);
	using __std(nextafter);
	using __std(nexttoward);
	using __std(remainder);
	using __std(remquo);
	using __std(rint);

	using __std(scalbn);
	using __std(tgamma);
	using __std(trunc);


	}

	using tr1::signbit;
	using tr1::fpclassify;
	using tr1::isfinite;
	using tr1::isinf;
	using tr1::isnan;
	using tr1::isnormal;
	using tr1::isgreater;
	using tr1::isgreaterequal;
	using tr1::isless;
	using tr1::islessequal;
	using tr1::islessgreater;
	using tr1::isunordered;
#endif

	_EWL_END_NAMESPACE_STD

#endif /*__cplusplus*/

/*	Include target math functions */
#include <math_config.h>

#endif /* _EWL_NO_MATH_LIB */

#endif /* #if os */

#if defined(_EWL_EXPORT_CNAMES) && defined(__cplusplus) && defined(_EWL_USING_NAMESPACE)
#include <math.h>
#endif /*  defined(_EWL_EXPORT_CNAMES) && defined(__cplusplus) && defined(_EWL_USING_NAMESPACE) */

#endif /* !_EWL_FLOATING_POINT */

#ifdef __STARCORE__
#pragma reject_floats reset
#endif 

#endif /* _EWL_CMATH */
